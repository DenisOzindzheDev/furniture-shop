basePath: /api
definitions:
  entity.Product:
    properties:
      category:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  entity.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  http.AuthResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/entity.User'
    type: object
  http.ErrorResponse:
    description: ErrorResponse provides a consistent structure for API errors
    properties:
      error:
        example: error message
        type: string
    type: object
  http.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    type: object
  http.ProductsResponse:
    description: ProductsResponse contains paginated list of products with metadata
    properties:
      has_more:
        type: boolean
      page:
        type: integer
      page_size:
        type: integer
      products:
        items:
          $ref: '#/definitions/entity.Product'
        type: array
      total:
        type: integer
    type: object
  http.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: password123
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API для интернет-магазина мебели
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Furniture Store API
  version: "1.0"
paths:
  /admin/products:
    get:
      consumes:
      - application/json
      description: Возвращает список продуктов с пагинацией для админ-панели. Требуются
        права администратора.
      parameters:
      - description: Фильтр по категории
        in: query
        name: category
        type: string
      - default: 1
        description: Номер страницы
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 20
        description: Размер страницы
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.ProductsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получение списка продуктов (админ)
      tags:
      - admin-products
    post:
      consumes:
      - multipart/form-data
      description: Создает новый продукт с возможностью загрузки изображения. Требуются
        права администратора.
      parameters:
      - description: Название продукта
        in: formData
        name: name
        required: true
        type: string
      - description: Описание продукта
        in: formData
        name: description
        required: true
        type: string
      - description: Цена продукта
        in: formData
        name: price
        required: true
        type: number
      - description: Категория продукта
        in: formData
        name: category
        required: true
        type: string
      - description: Количество на складе
        in: formData
        name: stock
        required: true
        type: integer
      - description: Изображение продукта (JPEG, PNG, WebP до 10MB)
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "413":
          description: Request Entity Too Large
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создание нового продукта
      tags:
      - admin-products
  /admin/products/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет продукт по ID. Также удаляет связанное изображение из S3.
        Требуются права администратора.
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удаление продукта
      tags:
      - admin-products
    put:
      consumes:
      - multipart/form-data
      description: Обновляет существующий продукт. Все поля опциональны - обновляются
        только переданные поля. Требуются права администратора.
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: integer
      - description: Название продукта
        in: formData
        name: name
        type: string
      - description: Описание продукта
        in: formData
        name: description
        type: string
      - description: Цена продукта
        in: formData
        name: price
        type: number
      - description: Категория продукта
        in: formData
        name: category
        type: string
      - description: Количество на складе
        in: formData
        name: stock
        type: integer
      - description: Изображение продукта (JPEG, PNG, WebP до 10MB)
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "413":
          description: Request Entity Too Large
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновление продукта
      tags:
      - admin-products
  /dev/test-pdf:
    get:
      consumes:
      - application/json
      description: Генерирует тестовый PDF для проверки функциональности
      produces:
      - application/pdf
      responses:
        "200":
          description: Тестовый PDF файл
          schema:
            type: file
      summary: Тест генерации PDF
      tags:
      - development
  /login:
    post:
      consumes:
      - application/json
      description: Выполняет вход пользователя и возвращает JWT токен
      parameters:
      - description: Данные для входа
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      summary: Авторизация пользователя
      tags:
      - auth
  /products:
    get:
      consumes:
      - application/json
      description: Возвращает список продуктов с возможностью фильтрации по категории
        и пагинацией
      parameters:
      - description: Фильтр по категории
        in: query
        name: category
        type: string
      - default: 1
        description: Номер страницы
        in: query
        name: page
        type: integer
      - default: 20
        description: Размер страницы
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.ProductsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      summary: Получение списка продуктов
      tags:
      - products
  /products/{id}:
    get:
      consumes:
      - application/json
      description: Возвращает детальную информацию о продукте по ID
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      summary: Получение информации о продукте
      tags:
      - products
  /products/{id}/download:
    get:
      consumes:
      - application/json
      description: Генерирует и возвращает PDF файл с информацией о продукте
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/pdf
      responses:
        "200":
          description: PDF файл
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      summary: Скачать PDF карточку продукта
      tags:
      - products
  /products/{id}/preview:
    get:
      consumes:
      - application/json
      description: Генерирует и возвращает PDF файл для просмотра в браузере
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/pdf
      responses:
        "200":
          description: PDF файл
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      summary: Просмотр PDF карточки продукта
      tags:
      - products
  /profile:
    get:
      consumes:
      - application/json
      description: Возвращает информацию о текущем пользователе
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получение профиля пользователя
      tags:
      - users
  /register:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя в системе
      parameters:
      - description: Данные для регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      summary: Регистрация пользователя
      tags:
      - auth
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: 'JWT токен в формате: "Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
