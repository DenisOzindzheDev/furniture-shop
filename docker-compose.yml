# docker-compose.yml
version: '3.8'

services:
  minio:
    image: minio/minio:latest
    container_name: furniture-minio
    environment:
      MINIO_ROOT_USER: furniture
      MINIO_ROOT_PASSWORD: furniture
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - furniture-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: furniture-postgres
    environment:
      POSTGRES_DB: furniture
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - furniture-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: furniture-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - furniture-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - furniture-network
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9093:9093"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - furniture-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 15
      start_period: 60s

  # Наше приложение
  api:
    build: .
    container_name: furniture-api
    depends_on:
      - postgres
      - redis
      - kafka
      - minio
    environment:
      APP_HTTP_PORT: ":8080"
      APP_DB_URL: "postgres://postgres:postgres@postgres:5432/furniture?sslmode=disable"
      APP_REDIS_ADDR: "redis:6379"
      APP_KAFKA_BROKERS: "kafka:9092"
      APP_JWT_SECRET: "talesofrussianglubinka"
      APP_READ_TIMEOUT: "15s"
      MIGRATIONS_PATH: "/migrations"
      APP_AWS_S3_HOST: "minio:9000"
      APP_AWS_ACCESS_KEY_ID: "furniture"
      APP_AWS_SECRET_ACCESS_KEY: "furniture"
      APP_AWS_S3_BUCKET: "furniture"
      APP_MAX_UPLOAD_SIZE: "10485760"
      APP_ALLOWED_IMAGE_TYPES: "image/jpeg,image/png,image/webp"
    ports:
      - "8080:8080"
    networks:
      - furniture-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
    - ./migrations:/migrations:ro

  # Kafka UI (опционально)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8081:8080"
    networks:
      - furniture-network

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  minio_data:

networks:
  furniture-network:
    driver: bridge